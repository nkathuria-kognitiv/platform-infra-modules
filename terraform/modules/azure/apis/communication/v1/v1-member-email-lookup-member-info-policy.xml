<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="requestBody" value="@(context.Request.Body.As<JObject>())" />
        <set-variable name="templateId" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("templateId"))" />
        <choose>
            <when condition="@(context.Variables["templateId"] == null || context.Variables["templateId"] == "")">
            <return-response>
                <set-status code="400" />
                <set-body>@{
                    var response = new JObject();
                    response.Add("code", 4006);
                    response.Add("message", "Missing templateId");
                    return response.ToString();
                    }</set-body>
            </return-response>
        </when>
    </choose>
    <!-- Sets the backend base url -->
    <set-backend-service base-url="@((string)((JObject)context.Variables["communication"]).SelectToken("acoustic.communicationUrl"))" />
    <!-- Sets the specific endpoint to hit -->
    <rewrite-uri template="@((string)((JObject)context.Variables["communication"]).SelectToken("acoustic.communicationUrlSuffix"))" copy-unmatched-params="true" />
    <!-- Set necessary headers -->
    <!--<set-header name="Authorization" exists-action="override">
        <value>@(context.Variables.GetValueOrDefault<string>("accessToken"))</value>
    </set-header> -->
    <set-method>POST</set-method>
    <set-header name="Content-Type" exists-action="override">
        <value>application/xml</value>
    </set-header>
    <set-variable name="tokenResponse" value="@("")" />
    <set-variable name="detailsResponse" value="@("")" />
    <set-variable name="segmentsResponse" value="@("")" />
    <choose>
        <when condition="@((string)((JObject)context.Variables["communication"]).SelectToken("backendProfileLookup") == "alpe")">
        <set-variable name="alpeBaseUrl" value="@((string)((JObject)context.Variables["communication"]).SelectToken("alpe.baseProfileUrl"))" />
        <set-variable name="tokenUrl" value="@(context.Variables["alpeBaseUrl"] + $"/token-types/{context.Request.MatchedParameters["source"]}/tokens/{context.Request.MatchedParameters["valueOfExternalMemberId"]}/member")" />
        <send-request mode="new" response-variable-name="tokenResponse" timeout="20" ignore-error="true">
            <set-url>@((string)context.Variables["tokenUrl"])</set-url>
            <set-method>GET</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@(context.Variables.GetValueOrDefault<string>("accessToken"))</value>
            </set-header>
            <set-body />
        </send-request>
        <set-variable name="alpeMemberId" value="@(((IResponse)context.Variables["tokenResponse"]).Body.As<JObject>().SelectToken("memberId"))" />
        <set-variable name="detailsUrl" value="@(context.Variables["alpeBaseUrl"] + $"/members/{context.Variables["alpeMemberId"]}?addresses=true")" />
        <set-variable name="segmentsUrl" value="@(context.Variables["alpeBaseUrl"] + $"/segments/member/{context.Variables["alpeMemberId"]}")" />
        <send-request mode="new" response-variable-name="detailsResponse" timeout="20" ignore-error="true">
            <set-url>@((string)context.Variables["detailsUrl"])</set-url>
            <set-method>GET</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@(context.Variables.GetValueOrDefault<string>("accessToken"))</value>
            </set-header>
            <set-body />
        </send-request>
        <send-request mode="new" response-variable-name="segmentsResponse" timeout="20" ignore-error="true">
            <set-url>@((string)context.Variables["segmentsUrl"])</set-url>
            <set-method>GET</set-method>
            <set-header name="Authorization" exists-action="override">
                <value>@(context.Variables.GetValueOrDefault<string>("accessToken"))</value>
            </set-header>
            <set-body />
        </send-request>
        <set-variable name="detailsResponseJObject" value="@(((IResponse)context.Variables["detailsResponse"]).Body.As<JObject>())" />
        <set-variable name="segmentsResponseJArray" value="@(((IResponse)context.Variables["segmentsResponse"]).Body.As<JArray>())" />
        <set-variable name="memberFirstName" value="@((string)((JObject)context.Variables["detailsResponseJObject"]).SelectToken("firstName"))" />
        <set-variable name="segments" value="@{
                    var segmentsResponse = (JArray)context.Variables["segmentsResponseJArray"];
                    var segmentCodeList = new JArray();
                    foreach (JObject segment in segmentsResponse) {
                        segmentCodeList.Add(segment.SelectToken("segmentCode"));
                    }
                    return segmentCodeList;
                }" />
        <set-variable name="email" value="@{
                    var detailsResponse = (JObject)context.Variables["detailsResponseJObject"];
                    var email = "";
        foreach (JObject address in detailsResponse.SelectToken("addresses")) {
        if (((string)address.SelectToken("channel.channelType")).ToLower() == "email") {
        email = (string)address.SelectToken("value.value");
        break;
        }
        }
        return email;
        }" />
    </when>
</choose>
<set-variable name="transactionId" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("details.transactionId"))" />
<set-variable name="partnerName" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("details.partnerName"))" />
<set-variable name="pointsRedeemed" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("details.rewardAmount"))" />
<set-variable name="subjectTag" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("details.subjectTag"))" />
<set-body>@{

var scriptObject = new JObject();

scriptObject.Add("memberFirstName", (string)context.Variables["memberFirstName"]);
scriptObject.Add("PartnerName", (string)context.Variables["partnerName"]);
//string nullBomb = null;
//nullBomb.ToLower();
scriptObject.Add("PointsRedeemed", (string)context.Variables["pointsRedeemed"]);
scriptObject.Add("segments", (JArray)context.Variables["segments"]);
return new XDocument(
new XElement("XTMAILING",
new XElement("CAMPAIGN_ID", (string)context.Variables["templateId"]),
new XElement("TRANSACTION_ID", (string)context.Variables["transactionId"]),
new XElement("RECIPIENT",
new XElement("EMAIL", (string)context.Variables["email"]),
new XElement("BODY_TYPE", "HTML"),
new XElement("PERSONALIZATION",
new XElement("TAG_NAME", "subjectTag"),
new XElement("VALUE", (string)context.Variables["subjectTag"])
),
new XElement("PERSONALIZATION",
new XElement("TAG_NAME", "MemberFirstName"),
new XElement("VALUE", (string)context.Variables["memberFirstName"])
),
new XElement("PERSONALIZATION",
new XElement("TAG_NAME", "PartnerName"),
new XElement("VALUE", (string)context.Variables["partnerName"])
),
new XElement("PERSONALIZATION",
new XElement("TAG_NAME", "PointsRedeemed"),
new XElement("VALUE", (string)context.Variables["pointsRedeemed"])
),
new XElement("SCRIPT_CONTEXT", new XCData(scriptObject.ToString()))
)
)
).ToString();
}</set-body>
        <!--<json-to-xml apply="always" consider-accept-header="true" parse-date="true" />-->
        <!--<return-response>
            <set-status code="200" reason="asdf" />
            <set-body>@(context.Request.Body.As<XDocument>().ToString())</set-body>
        </return-response>-->
        <!--<set-variable name="requestBody" value="@(context.Request.Body.As<JObject>(preserveContent: true))" />
        <set-variable name="templateId" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("templateId"))" />
        <set-variable name="details" value="@((string)((JObject)context.Variables["requestBody"]).SelectToken("details"))" />
        <choose>
            <when condition="@(context.Variables["templateId"] == null || context.Variables["templateId"] == "")">
                <return-response>
                    <set-status code="400" />
                    <set-body>@{
                            var response = new JObject();
                            response.Add("code", 4005);
                            response.Add("message", "Missing required templateId");
                            return response.ToString();
                        }</set-body>
                </return-response>
            </when>
            <otherwise>
                <return-response>
                    <set-status code="200" />
                    <set-body>@{
                        var response = new JObject();
                        response.Add("templateId", (string)context.Variables["templateId"]);
                        return response.ToString();
                    }</set-body>
                </return-response>
            </otherwise>
        </choose> -->
        </inbound>
<backend>
<base />
</backend>
<outbound>
<base />
</outbound>
<on-error>
<base />
</on-error>
        </policies>