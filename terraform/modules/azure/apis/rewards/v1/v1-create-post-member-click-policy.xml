<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-method>POST</set-method>
        <rewrite-uri template="/{programCode}/clicks" />
        <set-body>@{


            JObject inBody = context.Request.Body.As<JObject>();

            // inBody.Add("offerId", (String)context.Request.MatchedParameters["offerId"]);

            return inBody.ToString();


            }</set-body>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
        <set-body>@{

            var returnResponse = new JObject();
            var httpStatus = (String)context.Response.Body.As<JObject>(preserveContent: true).SelectToken("httpStatus");

            if (httpStatus == "CREATED") {
            var payLoad = (JObject)context.Response.Body.As<JObject>(preserveContent: true).SelectToken("payload");

            returnResponse.Add("internalId",  (String)payLoad.SelectToken("internalId"));
            returnResponse.Add("externalId",  (String)payLoad.SelectToken("externalId"));
            returnResponse.Add("trackingUrl",  (String)payLoad.SelectToken("trackingUrl"));

            }  else {
            var message = (JObject)context.Response.Body.As<JObject>(preserveContent: true).SelectToken("message");

            if  (null != message){
            returnResponse.Add("message",  (String)message.SelectToken("message"));
            }
            returnResponse.Add("code", 5000);

            }
            return returnResponse.ToString();

            }</set-body>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>