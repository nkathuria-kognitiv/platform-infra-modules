<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@((string)context.Request.MatchedParameters["merchantId"] == "8490257")">
            <return-response>
                <set-body>@(
                    JObject.FromObject
                    (new {
                    externalMerchantId = new {
                    source = "LN",
                    value = "8490257"
                    },
                    offers = new object[] {
                    new {
                    id = "123",
                    externalReferenceId = new {
                    source = "LN",
                    value = "123"
                    },
                    startDate = "2022-02-05T08:15:30-05:00",
                    endDate = "2023-02-05T08:15:30-05:00",
                    type = "AffiliatePromotion",
                    marketingDescription = new object[] {
                    new {
                    language = "en",
                    description = "a good offer...",
                    images = new object[] {
                    new {
                    url = "www.example.com/image.jpg",
                    alt = "",
                    type = "thumbnail",
                    order = 1
                    }
                    },
                    termsAndConditions = new {
                    language = "en",
                    description = "This offer..."
                    }
                    }
                    },
                    baseOfferDetails = new {
                    rewardType = "FixedValue",
                    currencyCode = "Points",
                    rewardTiers = new object[] {
                    new {
                    minTierSpendAmount = "1",
                    value = "10.00"
                    }
                    }
                    },
                    lastModifiedDate = "2020-02-29T01:30:00.000-05:00"
                    },
                    new {
                    id = "124",
                    externalReferenceId = new {
                    source = "LN",
                    value = "124"
                    },
                    startDate = "2022-02-05T08:15:30-05:00",
                    type = "AffiliatePromotion",
                    marketingDescription = new object[] {
                    new {
                    language = "en",
                    name = "ABC",
                    description = "free shipping...",
                    images = new object[] {
                    new {
                    url = "www.example.com/image.jpg",
                    alt = "",
                    type = "thumbnail",
                    order = "1"
                    }
                    }
                    }
                    },
                    baseOfferDetails = new {
                    rewardType = "Percentage",
                    currencyCode = "Points",
                    rewardTiers = new object[] {
                    new {
                    minTierSpendAmount = "0",
                    value = "13"
                    }
                    }
                    },
                    lastModifiedDate = "2021-04-22T01:30:00.000-05:00"
                    }
                    }
                    }
                    )
                    .ToString()
                    )</set-body>
            </return-response>
        </when>
        <when condition="@((string)context.Request.MatchedParameters["merchantId"] == "11111111")">
        <return-response>
            <set-body>@(
                JObject.FromObject
                (new {
                externalMerchantId = new {
                source = "LN",
                value = "11111111"
                },
                offers = new object[] {
                new {
                id = "125",
                externalReferenceId = new {
                source = "LN",
                value = "125"
                },
                startDate = "2022-02-28T08:15:30-05:00",
                type = "AffiliatePromotion",
                marketingDescription = new object[] {
                new {
                language = "en",
                description = "a good offer...",
                images = new object[] {
                new {
                url = "www.example.com/image.jpg",
                alt = "",
                type = "thumbnail",
                order = 1
                }
                },
                termsAndConditions = new {
                language = "en",
                description = "This offer...",
                }
                }
                },
                baseOfferDetails = new {
                rewardType = "FixedValue",
                currencyCode = "Points",
                rewardTiers = new object[] {
                new {
                minTierSpendAmount = "1",
                value = "15.00"
                }
                }
                },
                status = "Active",
                lastModifiedDate = "2020-04-15T01:30:00.000-05:00"
                }
                }
                }
                )
                .ToString()
                )</set-body>
        </return-response>
    </when>
    <otherwise>
        <return-response>
            <set-status code="400" />
            <set-body>@{
                var response = new JObject();

                response.Add("code", "4004");
                response.Add("message", "Invalid merchant");
                return response.ToString();
                }</set-body>
        </return-response>
    </otherwise>
</choose>
        </inbound>
<backend>
<base />
</backend>
<outbound>
<base />
</outbound>
<on-error>
<base />
</on-error>
        </policies>