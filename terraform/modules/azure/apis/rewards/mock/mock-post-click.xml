<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <set-variable name="requestBody" value="@(context.Request.Body.As<JObject>(preserveContent: true))" />
        <choose>
            <when condition="@(((JObject)context.Variables["requestBody"]).SelectToken("memberId.source") != null
                             && ((JObject)context.Variables["requestBody"]).SelectToken("memberId.value") != null )">
            <return-response>
                <set-status code="200" />
                <set-body>@{
                    var response = new JObject();

                    response.Add("clickId", "https://merchantabc.com?unique-click-code");

                    return response.ToString();
                    }</set-body>
            </return-response>
        </when>
        <otherwise>
            <return-response>
                <set-status code="400" />
                <set-body>@{
                    var response = new JObject();

                    response.Add("code", 4002);
                    response.Add("message", "memberId is not supplied");
                    return response.ToString();
                    }</set-body>
            </return-response>
        </otherwise>
    </choose>
</inbound>
<backend>
<base />
</backend>
<outbound>
<base />
</outbound>
<on-error>
<base />
</on-error>
        </policies>