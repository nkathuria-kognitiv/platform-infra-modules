<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <choose>
            <!-- Check to see if backend is ALP-E -->
            <when condition="@((string)((JObject)context.Variables["loyalty"]).SelectToken("backendLoyalty") == "alpe")">
            <!-- Sets the backend base url -->
            <set-backend-service base-url="@((string)((JObject)context.Variables["loyalty"]).SelectToken("alpe.baseUrl"))" />
            <!-- Sets the specific endpoint to hit -->
            <rewrite-uri template="@("/token-types/" + (string)context.Request.MatchedParameters["memberIdSource"] + "/tokens/" + (string)context.Request.MatchedParameters["valueOfExternalMemberId"] + "/member")" />
            <!-- Set necessary headers -->
            <set-header name="Authorization" exists-action="override">
                <value>@(context.Variables.GetValueOrDefault<string>("accessToken"))</value>
            </set-header>
            <set-method>GET</set-method>
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
        </when>
    </choose>
</inbound>
<backend>
<base />
</backend>
<outbound>
<base />
<choose>
    <when condition="@((string)((JObject)context.Variables["loyalty"]).SelectToken("backendLoyalty") == "alpe")">
    <!-- Take response from backend and return necessary fields -->
    <choose>
        <when condition="@(context.Response.StatusCode == 200)">
            <set-body>@{
                var returnResponse = new JObject();
                var memberId = (string)context.Response.Body.As<JObject>(preserveContent: true).SelectToken("memberId");
                returnResponse.Add("memberId", memberId);
                return returnResponse.ToString();
                }</set-body>
        </when>
    </choose>
</when>
</choose>
        </outbound>
<on-error>
<base />
</on-error>
        </policies>